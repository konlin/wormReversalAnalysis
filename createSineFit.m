function cf_=createSineFit(c, index, numFrames)
%CREATEFIT Create plot of data sets and fits
%   CREATEFIT(C)
%   Creates a plot, similar to the plot in the main Curve Fitting Tool,
%   using the data that you provide as input.  You can
%   use this function with the same data you used with CFTOOL
%   or with different data.  You may want to edit the function to
%   customize the code and this help message.
%
%   Number of data sets:  1
%   Number of fits:  1

% Data from data set "c":
%     Y = c:
%     Unweighted

% Auto-generated by MATLAB on 17-Oct-2011 12:47:02

x_1 = (1:numel(c))';
c = c(:);

% --- Create fit "fit 1"

% Apply exclusion rule "excludeHT copy 1"
ex_ = (x_1 <= 15 | x_1 >= 90);
fo_ = fitoptions('method','NonlinearLeastSquares','Lower',[-Inf    0 -Inf]);
ok_ = isfinite(x_1) & isfinite(c);
if ~all( ok_ )
    warning( 'GenerateMFile:IgnoringNansAndInfs',...
        'Ignoring NaNs and Infs in data.' );
end
st_ = [8.7688064275223425 0.080553657784353666 -0.77921790497500176 ];
set(fo_,'Startpoint',st_);
set(fo_,'Exclude',ex_(ok_));
ft_ = fittype('sin1');

% Fit this model using new data
if sum(~ex_(ok_))<2
    % Too many points excluded.
    error( 'GenerateMFile:NotEnoughDataAfterExclusionRule',...
        'Not enough data left to fit ''%s'' after applying exclusion rule ''%s''.',...
        'fit 1', 'excludeHT copy 1' );
else
    cf_ = fit(x_1(ok_),c(ok_),ft_,fo_);
end


% %Set up figure to receive data sets and fits
%  if(index>85 && index<105)
%     figure;
%     f_ = clf;
%     figure(f_);
%     set(f_,'Units','Pixels','Position',[654 271 680 481]);
%     %Line handles and text for the legend.
%     legh_ = [];
%     legt_ = {};
%     %Limits of the x-axis.
%     xlim_ = [Inf -Inf];
%     %Axes for the plot.
%     ax_ = axes;
%     set(ax_,'Units','normalized','OuterPosition',[0 0 1 1]);
%     set(ax_,'Box','on');
%     axes(ax_);
%     hold on;
% 
% % --- Plot data that was originally in data set "c"
% 
%     h_ = line(x_1,c,'Parent',ax_,'Color',[0.333333 0 0.666667],...
%          'LineStyle','none', 'LineWidth',1,...
%          'Marker','.', 'MarkerSize',12);
%     xlim_(1) = min(xlim_(1),min(x_1));
%     xlim_(2) = max(xlim_(2),max(x_1));
%     legh_(end+1) = h_;
%     legt_{end+1} = 'c';
% 
% %    Nudge axis limits beyond data limits
%     if all(isfinite(xlim_))
%         xlim_ = xlim_ + [-1 1] * 0.01 * diff(xlim_);
%         set(ax_,'XLim',xlim_)
%     else
%         set(ax_, 'XLim',[0.010000000000000009, 100.98999999999999]);
%     end
% 
% % Alternatively uncomment the following lines to use coefficients from the
% % original fit. You can use this choice to plot the original fit against new
% % data.
% %    cv_ = { 8.7335832217913776, 0.079868011855388873, -0.74733524557608633};
% %    cf_ = cfit(ft_,cv_{:});
% 
% % Plot this fit
%     h_ = plot(cf_,'fit',0.95);
%     set(h_(1),'Color',[1 0 0],...
%         'LineStyle','-', 'LineWidth',2,...
%         'Marker','none', 'MarkerSize',6);
%     %Turn off legend created by plot method.
%     legend off;
%     %Store line handle and fit name for legend.
%     legh_(end+1) = h_(1);
%     legt_{end+1} = 'fit 1';
%     title(['Frame ', num2str(index), ' out of ',num2str(numFrames)]);
%     text(60, 7, num2str(mod(cf_.c1, 2* pi)./pi));
% 
%     % --- Finished fitting and plotting data. Clean up.
%     hold off;
%     % Display legend
%     leginfo_ = {'Orientation', 'vertical', 'Location', 'NorthEast'};
%     h_ = legend(ax_,legh_,legt_,leginfo_{:});
%     set(h_,'Interpreter','none');
%     % Remove labels from x- and y-axes.
%     xlabel(ax_,'');
%     ylabel(ax_,'');
    pause(2);
end